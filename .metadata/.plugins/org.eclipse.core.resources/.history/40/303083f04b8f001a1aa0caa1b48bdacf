package com.capgemini.librarymanagementsystem_jdbc.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;

import com.capgemini.librarymanagementsystem_jdbc.dto.Book;
import com.capgemini.librarymanagementsystem_jdbc.dto.BookIssueDetails;
import com.capgemini.librarymanagementsystem_jdbc.dto.BorrowedBooks;
import com.capgemini.librarymanagementsystem_jdbc.dto.RequestDetails;
import com.capgemini.librarymanagementsystem_jdbc.dto.Users;
import com.capgemini.librarymanagementsystem_jdbc.exception.LMSException;
import com.capgemini.librarymanagementsystem_jdbc.utility.JDBCUtility;

public class UserDAOImplement implements UsersDAO {

	Connection connection = null;
	PreparedStatement statement = null;
	ResultSet rs = null;
	Statement stmt = null;

	@Override
	public boolean register(Users user) {
		// TODO Auto-generated method stub
		connection = JDBCUtility.getConnection();

		try (PreparedStatement statement = connection.prepareStatement(QueryMapper.registerQuery);) {

			statement.setInt(1, user.getUId());
			statement.setString(2, user.getFirstName());
			statement.setString(3, user.getLastName());
			statement.setString(4, user.getEmail());
			statement.setString(5, user.getPassword());
			statement.setLong(6, user.getMobile());
			statement.setString(7, user.getRole());
			int count = statement.executeUpdate();
			if ((user.getEmail().isEmpty()) && (count == 0)) {
				return false;
			} else {
				return true;
			}
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	@Override
	public Users login(String email, String password) {
		// TODO Auto-generated method stub
		
		connection = JDBCUtility.getConnection();

		try (PreparedStatement statement = connection.prepareStatement(QueryMapper.loginQuery);) {

			statement.setString(1, email);
			statement.setString(2, password);
			rs = statement.executeQuery();
			if (rs.next()) {
				Users bean = new Users();
				bean.setSId(rs.getInt("sId"));
				bean.setFirstName(rs.getString("firstName"));
				bean.setLastName(rs.getString("lastName"));
				bean.setEmail(rs.getString("email"));
				bean.setPassword(rs.getString("password"));
				bean.setMobile(rs.getLong("mobile"));
				bean.setRole(rs.getString("role"));
				return bean;
			} else {
				return null;
			}

		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public boolean addBook(Book book) {
		// TODO Auto-generated method stub
		connection = JDBCUtility.getConnection();

		try (PreparedStatement statement = connection.prepareStatement(QueryMapper.addBookQuery);) {

			statement.setInt(1, book.getBId());
			statement.setString(2, book.getBookName());
			statement.setString(3, book.getAuthor());
			statement.setString(4, book.getCategory());
			statement.setString(5, book.getPublisher());
			int count = statement.executeUpdate();
			if (count != 0) {
				return true;
			} else {
				return false;
			}
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}

	}

	@Override
	public boolean issueBook(int bId, int uId) {
		// TODO Auto-generated method stub
		connection = JDBCUtility.getConnection();

		try (PreparedStatement statement = connection.prepareStatement(QueryMapper.issueBookQuery1);) {

			statement.setInt(1, uId);
			statement.setInt(2, bId);
			statement.setInt(3, uId);
			ResultSet rs = statement.executeQuery();
			if (rs.next()) {
				try (PreparedStatement pstmt1 = connection.prepareStatement(QueryMapper.issueBookQuery2);) {
					pstmt1.setInt(1, bId);
					pstmt1.setInt(2, uId);
					SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
					Calendar cal = Calendar.getInstance();
					String issueDate = sdf.format(cal.getTime());
					pstmt1.setDate(3, java.sql.Date.valueOf(issueDate));
					cal.add(Calendar.DAY_OF_MONTH, 7);
					String returnDate = sdf.format(cal.getTime());
					pstmt1.setDate(4, java.sql.Date.valueOf(returnDate));
					int count = pstmt1.executeUpdate();
					if (count != 0) {
						try (PreparedStatement pstmt2 = connection.prepareStatement(QueryMapper.issueBookQuery3);) {
							pstmt2.setInt(1, uId);
							pstmt2.setInt(2, bId);
							pstmt2.setInt(3, uId);
							int isBorrowed = pstmt2.executeUpdate();
							if (isBorrowed != 0) {
								return true;
							} else {
								return false;
							}
						}
					} else {
						throw new LMSException("Book Not issued");
					}
				}
			} else {
				throw new LMSException("The respective user have not placed any request");
			}
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	@Override
	public boolean request(int uId, int bId) {
		// TODO Auto-generated method stub
		connection = JDBCUtility.getConnection();

		try (PreparedStatement statement = connection.prepareStatement(QueryMapper.requestQuery1);) {
			statement.setInt(1, uId);
			statement.setInt(2, bId);
			statement.setInt(3, uId);
			ResultSet rs = statement.executeQuery();
			if (rs.next()) {
				int isBookExists = rs.getInt("sId");
				if (isBookExists == 0) {
					try (PreparedStatement pstmt1 = connection.prepareStatement(QueryMapper.requestQuery2);) {
						pstmt1.setInt(1, uId);
						rs = pstmt1.executeQuery();
						if (rs.next()) {
							int noOfBooksBorrowed = rs.getInt("sId");
							if (noOfBooksBorrowed < 3) {
								try (PreparedStatement pstmt2 = connection
										.prepareStatement(QueryMapper.requestQuery3);) {
									pstmt2.setInt(1, uId);
									pstmt2.setInt(2, uId);
									pstmt2.setInt(3, bId);
									pstmt2.setInt(4, bId);
									pstmt2.setInt(5, uId);
									int count = pstmt2.executeUpdate();
									if (count != 0) {
										return true;
									} else {
										return false;
									}
								}
							} else {
								throw new LMSException("no Of books limit has crossed");
							}
						} else {
							throw new LMSException("no of books limit has crossed");
						}
					}
				} else {
					throw new LMSException("You have already borrowed the requested book");
				}
			} else {
				throw new LMSException("You have already borrowed the requested book");
			}

		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	@Override
	public boolean updateBook(Book book) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean removeBook(int bId) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean updatePassword(String email, String password, String newPassword, String role) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public List<BorrowedBooks> borrowedBook(int uId) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public LinkedList<Book> searchBookById(int bId) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public LinkedList<Book> searchBookByAuthor(String author) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public LinkedList<Book> searchBookByTitle(String bookName) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public LinkedList<Book> getBooksInfo() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean returnBook(int bId, int uId, String status) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public LinkedList<BookIssueDetails> bookHistoryDetails(int uId) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public LinkedList<BookIssueDetails> showIssuedBooks() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public LinkedList<RequestDetails> showRequests() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public LinkedList<Users> showUsers() {
		// TODO Auto-generated method stub
		return null;
	}

}